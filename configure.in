AC_INIT(src/Makefile.am)

. $srcdir/OAESIS-VERSION

dnl libtool versioning
LT_RELEASE=$OAESIS_MAJOR_VERSION.$OAESIS_MINOR_VERSION
LT_CURRENT=`expr $OAESIS_MAJOR_VERSION + $OAESIS_MINOR_VERSION`
LT_REVISION=$OAESIS_MICRO_VERSION
LT_AGE=$OAESIS_MINOR_VERSION
LT_VERSION_INFO="-version-info $LT_CURRENT:$LT_REVISION:$LT_AGE"

dnl Check system type
AC_CANONICAL_SYSTEM
AC_C_BIGENDIAN
AC_C_INLINE

dnl Initialize automake macros
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

dnl Make a header based on the things we will find out
AM_CONFIG_HEADER(config.h)

dnl Check for programs
AC_ARG_PROGRAM
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

dnl Use this instead of AC_PROG_RANLIB because
dnl this works with cross-compiling.
AC_CHECK_TOOL(RANLIB, ranlib, :)

dnl Check if launcher should be linked with the server
AC_ARG_ENABLE(launcher-as-prg, [  --enable-launcher-as-prg    don't link the launcher with the server ])
if test x$enable_launcher_as_prg = xyes ; then
  AC_DEFINE(LAUNCHER_AS_PRG)
fi
AM_CONDITIONAL(LAUNCHER_AS_PRG, test x$enable_launcher_as_prg = xyes)

dnl Checks for special network libraries.
AC_CHECK_FUNCS(socket, , AC_CHECK_LIB(socket, socket))
AC_CHECK_FUNCS(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname))

if test x$with_ovdisis = xyes ; then
  AC_MSG_ERROR([
*** Directory must be specified for --with-ovdisis])
fi

if test x$with_ovdisis = x ; then 
  # Look for separately installed ovdisis

  AM_PATH_OVDISIS(0.0.1,,
    AC_MSG_ERROR([
*** ovdisis 0.0.1 or better is required. The latest version of ovdisis
*** is always available from ftp://ftp.nocrew.org.]),
    libovdisis)

  ovdisis_cflags=$OVDISIS_CFLAGS
  ovdisis_libs=$OVDISIS_LIBS
else
  # Use uninstalled ovdisis (assume they got the version right)

  if test -x $with_ovdisis/ovdisis-config ; then 
    :
  else
    AC_MSG_ERROR([ovdisis directory ($with_ovdisis) not present or not configured])
  fi

  # For use in oaesis-config
  ovdisis_cflags=`$with_ovdisis/ovdisis-config --cflags`
  ovdisis_libs=`$with_ovdisis/ovdisis-config --libs`

  ovdisis_release=`$with_ovdisis/ovdisis-config --version | sed 's%\\.[[0-9]]*$%%'`

  # canonicalize relative paths
  case $with_ovdisis in 
    /*)
      ovdisis_dir=$with_ovdisis
      ;;
    *)
      ovdisis_dir="\$(top_builddir)/$with_ovdisis"
      ;;
  esac

  OVDISIS_CFLAGS="-I$ovdisis_dir"
  OVDISIS_LIBS=$ovdisis_dir/libovdisis.la

  AC_SUBST(OVDISIS_CFLAGS)
  AC_SUBST(OVDISIS_LIBS)

  dnl This is needed for AC_CHECK_HEADERS to find the otosis 
  dnl and the oVDIsis headers
  CPPFLAGS="$CPPFLAGS $OVDISIS_CFLAGS"
fi

if test x$target_os = xmint ; then
  COMM_IFC="pmsg"

  AC_CHECK_LIB(socket,accept)
else
  COMM_IFC="sockets"

  dnl extra options
  AC_ARG_ENABLE(vdi-tunnel, [  --disable-vdi-tunnel    tunnel VDI calls to the oAESis server ], , AC_DEFINE(TUNNEL_VDI_CALLS))

  AC_CHECK_LIB(pthread,pthread_create)

  if test x$with_otosis = xyes ; then
    AC_MSG_ERROR([
*** Directory must be specified for --with-otosis])
  fi

  if test x$with_otosis = x ; then 
    # Look for separately installed otosis

    AM_PATH_OTOSIS(0.31.0,,
      AC_MSG_ERROR([
*** otosis 0.31.0 or better is required. The latest version of otosis
*** is always available from ftp://ftp.nocrew.org.]),
      libotosis)

    otosis_cflags=$OTOSIS_CFLAGS
    otosis_libs=$OTOSIS_LIBS
  else
    # Use uninstalled otosis (assume they got the version right)

    if test -x $with_otosis/otosis-config ; then 
      :
    else
      AC_MSG_ERROR([otosis directory ($with_otosis) not present or not configured])
    fi

    # For use in oaesis-config
    otosis_cflags=`$with_otosis/otosis-config --cflags`
    otosis_libs=`$with_otosis/otosis-config --libs`

    otosis_release=`$with_otosis/otosis-config --version | sed 's%\\.[[0-9]]*$%%'`

    # canonicalize relative paths
    case $with_otosis in 
      /*)
        otosis_dir=$with_otosis
        ;;
      *)
        otosis_dir="\$(top_builddir)/$with_otosis"
        ;;
    esac

    OTOSIS_CFLAGS="-I$otosis_dir"
    OTOSIS_LIBS=$otosis_dir/libfb.la

    AC_SUBST(OTOSIS_CFLAGS)
    AC_SUBST(OTOSIS_LIBS)
  fi

  dnl This is needed for AC_CHECK_HEADERS to find the otosis 
  dnl and the oVDIsis headers
  CPPFLAGS="$CPPFLAGS $OTOSIS_CFLAGS"
fi


dnl Use libtool to create liboaesis, but not for MiNT
AM_PROG_LIBTOOL

OSISINCLUDE=${includedir}/osis

if test x$target_os = xmint; then
  AC_DEFINE(MINT_TARGET)
fi

AM_CONDITIONAL(MINT_TARGET, test x$target_os = xmint)
AM_CONDITIONAL(USE_LIBTOOL, test x$target_os != xmint)

dnl Check for header files
AC_HEADER_STDC
AC_CHECK_HEADERS(alloc.h)
AC_CHECK_HEADERS(process.h)
AC_CHECK_HEADERS(support.h)
AC_CHECK_HEADERS(mintbind.h)
AC_CHECK_HEADERS(basepage.h)
AC_CHECK_HEADERS(compiler.h)
AC_CHECK_HEADERS(fcntl.h)
AC_CHECK_HEADERS(ioctl.h)
AC_CHECK_HEADERS(osbind.h)
AC_CHECK_HEADERS(sysvars.h)
AC_CHECK_HEADERS(mint/dcntl.h)

dnl Check for POSIX types
AC_CHECK_TYPE(int8_t, signed char)
AC_CHECK_TYPE(u_int8_t, unsigned char)
AC_CHECK_TYPE(int16_t, signed short)
AC_CHECK_TYPE(u_int16_t, unsigned short)
AC_CHECK_TYPE(int32_t, signed long)
AC_CHECK_TYPE(u_int32_t, unsigned long)

dnl Check for SIGSTKFLT
OAESIS_CHECK_SIGNAL(SIGSTKFLT) 

dnl Define version in config.h
AC_DEFINE_UNQUOTED(OAESIS_VERSION, "$VERSION")

dnl Specify which variables that should be exchanged
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(LT_VERSION_INFO)
AC_SUBST(OSISINCLUDE)
AC_SUBST(target_cpu)
AC_SUBST(target_os)
AC_SUBST(COMM_IFC)

dnl Set CPPFLAGS
CPPFLAGS="$CPPFLAGS -Wall -Wunused -Wmissing-prototypes"

dnl Specify which files that should be created
AC_OUTPUT([
Makefile
src/Makefile
src/comm/Makefile
src/common/Makefile
src/launcher/Makefile
src/lib/Makefile
src/lib/srv_put.c
src/server/Makefile
src/server/srv_get.c
src/startup/Makefile
test/Makefile
test/dr-gem/Makefile
tools/Makefile
oaesis.m4
oaesis-config
])
