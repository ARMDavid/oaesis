AC_INIT(src/Makefile.am)

dnl For automake
PACKAGE=oaesis
VERSION=0.9

dnl Check system type
AC_CANONICAL_SYSTEM

dnl Initialize automake macros
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

dnl Make a header based on the things we will find out
AM_CONFIG_HEADER(config.h)

dnl Use libtool to create liboaesis
AM_PROG_LIBTOOL

dnl Check for programs
AC_ARG_PROGRAM
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl Check for libraries
AC_CHECK_LIB(mint,main)

if test x$with_ovdisis = xyes ; then
  AC_MSG_ERROR([
*** Directory must be specified for --with-ovdisis])
fi

if test x$with_ovdisis = x ; then 
  # Look for separately installed ovdisis

  AM_PATH_OVDISIS(0.0.0,,
    AC_MSG_ERROR([
*** ovdisis 0.0.0 or better is required. The latest version of ovdisis
*** is always available from ftp://ftp.nocrew.org.]),
    libfb)

  ovdisis_cflags=$OVDISIS_CFLAGS
  ovdisis_libs=$OVDISIS_LIBS
else
  # Use uninstalled ovdisis (assume they got the version right)

  if test -x $with_ovdisis/ovdisis-config ; then 
    :
  else
    AC_MSG_ERROR([ovdisis directory ($with_ovdisis) not present or not configured])
  fi

  # For use in ovdisis-config
  ovdisis_cflags=`$with_ovdisis/ovdisis-config --cflags`
  ovdisis_libs=`$with_ovdisis/ovdisis-config --libs`

  ovdisis_release=`$with_ovdisis/ovdisis-config --version | sed 's%\\.[[0-9]]*$%%'`

  # canonicalize relative paths
  case $with_ovdisis in 
    /*)
      ovdisis_dir=$with_ovdisis
      ;;
    *)
      ovdisis_dir="\$(top_builddir)/$with_ovdisis"
      ;;
  esac

  OVDISIS_CFLAGS="-I$ovdisis_dir"
  OVDISIS_LIBS=$ovdisis_dir/libfb.la

  AC_SUBST(OVDISIS_CFLAGS)
  AC_SUBST(OVDISIS_LIBS)
fi

AC_SUBST(ovdisis_cflags)
AC_SUBST(ovdisis_libs)

dnl Set target specific things
case "${target}" in
    *mint*)    DEFS="$DEFS -DMINT_TARGET" ;;

dnl Assume that MiNTwrapper includes are in /usr/local/include/tos
dnl and that gemlib includes are in /usr/local/include/gem. This
dnl has to be changed so that all include root directories are
dnl searched for <root>/tos and <root>/gem
dnl    *)    CPPFLAGS="$CPPFLAGS -I/usr/local/include/tos -I/usr/local/include/gem" ;;
       *)    CPPFLAGS="$CPPFLAGS -I/usr/local/include/tos" ;;
esac

dnl Check for header files
AC_HEADER_STDC
AC_CHECK_HEADERS(alloc.h)
AC_CHECK_HEADERS(process.h)
AC_CHECK_HEADERS(support.h)
AC_CHECK_HEADERS(mintbind.h)
AC_CHECK_HEADERS(basepage.h)
AC_CHECK_HEADERS(compiler.h)
AC_CHECK_HEADERS(fcntl.h)
AC_CHECK_HEADERS(ioctl.h)
AC_CHECK_HEADERS(osbind.h)
AC_CHECK_HEADERS(vdi.h)
AC_CHECK_HEADERS(vdibind.h)
AC_CHECK_HEADERS(sysvars.h)

dnl Specify which variables that should be exchanged
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(target_cpu)
AC_SUBST(target_os)

dnl Set CFLAGS
CFLAGS="$CFLAGS -Wall"

dnl Setup symbolic links
AC_LINK_FILES(src/common/debug.c, src/lib/debug.c)
AC_LINK_FILES(src/common/debug.c, src/server/debug.c)
AC_LINK_FILES(src/comm/srv_get_sockets.c, src/server/srv_get.c)
AC_LINK_FILES(src/comm/srv_put_sockets.c, src/lib/srv_put.c)
AC_LINK_FILES(src/common/vdi.c, src/lib/vdi.c)
AC_LINK_FILES(src/common/vdi.c, src/server/vdi.c)
AC_LINK_FILES(src/lib/resource.h, src/server/resource.h)

dnl Specify which files that should be created
AC_OUTPUT(Makefile src/Makefile src/comm/Makefile src/common/Makefile src/lib/Makefile src/server/Makefile test/Makefile)
